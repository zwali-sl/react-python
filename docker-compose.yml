version: '3.8'

services:
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME-localstack_main}"
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
      - "4571:4571"
    environment:
      - SERVICES=lambda,iam,s3,dynamodb,sts,ec2
      - LAMBDA_EXECUTOR=local
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      # see ZooKeeper Then Four Letter Words
      # allows us to to run echo "ruok" | nc localhost 2181 ; echo
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"

  broker:
    image: confluentinc/cp-kafka:5.5.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 0



  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'

  kafdrop:
    image: obsidiandynamics/kafdrop:3.27.0
    hostname: kafdrop
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:29092"
      SCHEMAREGISTRY_CONNECT: "http://schema-registry:8081"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"

  landoop-schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.5
    hostname: landoop-schema-registry-ui
    depends_on:
      - schema-registry
    ports:
      - "8000:8000"
    environment:
      SCHEMAREGISTRY_URL: http://localhost:8081
      ALLOW_DELETION: 1

  consumer-v1:
    build:
      context: ./services/
      dockerfile: ./consumer/Dockerfile
    depends_on:
      - localstack
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTER_HOSTNAME: broker:29092
      TOPIC_NAME: person-v1
      SCHEMA_VERSION: 1
      SCHEMA_REGISTRY_HOSTNAME: "http://schema-registry:8081"
      BUCKET_NAME: consumer-storage-dna-arch-poc-local
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: eu-west-2
      LOCALSTACK_HOSTNAME: "localstack:4566"
      LOGLEVEL: DEBUG
      CONFIG_BUCKET_NAME: consumer-config-dna-arch-poc-local
      SUBJECT: "person-v1-value"
      AUTO_OFFSET_RESET: ${CONSUMER_AUTO_OFFSET_RESET:-latest}
      POLL_INDEFINITELY: ${CONSUMER_POLL_INDEFINITELY}
      TOPIC_SUFFIX: ${CONSUMER_TOPIC_SUFFIX}
      
  consumer-v2:
    build:
      context: ./services/
      dockerfile: ./consumer/Dockerfile
    depends_on:
      - localstack
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTER_HOSTNAME: broker:29092
      TOPIC_NAME: person-v1
      SCHEMA_VERSION: 2
      SCHEMA_REGISTRY_HOSTNAME: "http://schema-registry:8081"
      BUCKET_NAME: consumer-storage-dna-arch-poc-local
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: eu-west-2
      LOCALSTACK_HOSTNAME: "localstack:4566"
      LOGLEVEL: DEBUG
      CONFIG_BUCKET_NAME: consumer-config-dna-arch-poc-local

  consumer-v3:
    build:
      context: ./services/
      dockerfile: ./consumer/Dockerfile
    depends_on:
      - localstack
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTER_HOSTNAME: broker:29092
      TOPIC_NAME: person-v2
      SCHEMA_REGISTRY_HOSTNAME: "http://schema-registry:8081"
      BUCKET_NAME: consumer-storage-dna-arch-poc-local
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: eu-west-2
      LOCALSTACK_HOSTNAME: "localstack:4566"
      LOGLEVEL: DEBUG
      CONFIG_BUCKET_NAME: consumer-config-dna-arch-poc-local

  adapter:
    build:
      context: ./services/
      dockerfile: ./adapter/Dockerfile
    depends_on:
      - localstack
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTER_HOSTNAME: broker:29092
      SCHEMA_REGISTRY_HOSTNAME: "http://schema-registry:8081"
      TOPIC_NAME: person-v2
      CAST_TOPIC_NAME: person-v1
      CAST_SCHEMA_VERSION: 2
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: eu-west-2
      LOCALSTACK_HOSTNAME: "localstack:4566"
      CONFIG_BUCKET_NAME: "producer-config-dna-arch-poc-local"
      LOGLEVEL: DEBUG
      POLL_INDEFINITELY: ${ADAPTER_POLL_INDEFINITELY}
      AUTO_OFFSET_RESET: ${ADAPTER_AUTO_OFFSET_RESET:-latest}
      TOPIC_SUFFIX: ${ADAPTER_TOPIC_SUFFIX}

  convergence:
    build:
      context: ./services/kstreams_example/convergence
    ports:
      - "8082:8082"
    depends_on:
      - localstack
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTER_HOSTNAME: broker:29092
      SCHEMA_REGISTRY_HOSTNAME: "http://schema-registry:8081"
      LOGLEVEL: DEBUG

  convergence-producer:
    build:
      context: ./services/kstreams_example/convergence-producer
    ports:
      - "8083:8083"
    depends_on:
      - localstack
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTER_HOSTNAME: broker:29092
      SCHEMA_REGISTRY_HOSTNAME: "http://schema-registry:8081"

  version-demo-server:
    build:
      context: ./applications/
      dockerfile: ./version-demo-server-py/Dockerfile
    depends_on:
      - broker
      - schema-registry
    ports:
      - "5678:5678"
    environment:
      KAFKA_CLUSTER_HOSTNAME: broker:29092
      TOPIC_NAME: person-v2
      SUBJECT: person
      SCHEMA_VERSION: 2
      SCHEMA_REGISTRY_HOSTNAME: "http://schema-registry:8081"
      BUCKET_NAME: consumer-storage-dna-arch-poc-local
      PRODUCER_LAMBDA: producer-local
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: eu-west-2
      LOCALSTACK_HOSTNAME: "localstack:4566"
      LOGLEVEL: DEBUG
